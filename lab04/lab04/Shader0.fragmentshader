#version 330 core

// output data
layout(location = 0) out vec3 color1;

// Task 3.2c FS: get vertex position from VS 
in vec4 vertexPosition_worldspace;
in vec4 reflexCoord;
in vec3 vertex_position_cameraspace;
in vec3 vertex_normal_cameraspace;
in float lakeflag;
in vec2 vertex_UV;

uniform sampler2D diffuseColorSampler;
uniform sampler2D specularColorSampler;
uniform sampler2D diffuseColorSampler1;
uniform sampler2D shadowMap;
uniform vec3 light_position_cameraspace;
uniform float time0;
uniform int textureflag;

 
void main(){
    
    vec3 light_color = vec3(1, 1, 1);
    float lightpower = 10;
    vec3 Ls = vec3(1, 1, 1);
    vec3 Ld = vec3(1, 1, 1);
    vec3 La = vec3(1, 1, 1);
    vec3 Ks = vec3(0);
    vec3 Kd = vec3(0);
    vec3 Ka = vec3(0);
    float Ns = 0;
    float trans = 1.0;
    vec3 vertex_normal_cameraspaceN = vertex_normal_cameraspace;
    float time = time0;
    int timeflag = 0;

    do{
        if(time>1){
            time=time-1;
            timeflag=timeflag+1;
        }
    }while(time>1);
    if (timeflag%2){
        time=1-time;
    }
   

    
    if(textureflag==0) {  

    Ks = vec3(texture(specularColorSampler, 12* vertex_UV).rgb);
    Kd = vec3(texture(diffuseColorSampler, 12* vertex_UV).rgb);
    Ks = vec3(0.2,0.2,0.2);
    Ka = vec3(0.12, 0.26, 0);
    Ns = 100;
    }
    else if(textureflag==1){
        Ks = vec3(0,0,0);
        Kd = vec3(texture(diffuseColorSampler, vec2(15* vertex_UV.x, vertex_UV.y)).rgb);
        Ks = vec3(mix(Kd ,Ks ,0.5));
        Ka = vec3(0.1, 0.1, 0.1);
        Ns = 100;
    }
    else if(textureflag==2){
        Ks = vec3(0,0,0);
        Kd = vec3(texture(specularColorSampler,  vertex_UV).rgb);
        Ks = vec3(mix(Kd ,Ks ,0.5));
        Ka = vec3(0.12, 0.26, 0);
        Ns = 100;
        trans = length(texture(diffuseColorSampler1,  vertex_UV).rgb);
    }
    
    else if(textureflag==5){
        vertex_normal_cameraspaceN = -vertex_normal_cameraspace;
        Ks = vec3(0,0,0);
        Kd = vec3(texture(specularColorSampler,  vertex_UV).rgb);
        Ks = vec3(mix(Kd ,Ks ,0.5));
        Ka = vec3(0.12, 0.26, 0);
        Ns = 100;
        trans = length(texture(diffuseColorSampler1,  vertex_UV).rgb);
        vertex_normal_cameraspaceN = -vertex_normal_cameraspace;
    }
    else if(textureflag==3){
        Ks = vec3(0,0,0);
        Kd = vec3(texture(diffuseColorSampler, vertex_UV).rgb);
        Ks = vec3(mix(Kd ,Ks ,0.5));
        Ka = vec3(0.1, 0.1, 0.1);
        Ns = 1000;
    }
    else if(textureflag==4){
        Ks = vec3(1,1,1);
        Ka = vec3(0, 0.05, 0.1);
        Ns = 100;
        trans =0.7;
    }
    else if(textureflag==6){
        Ks = vec3(0,0,0);
        Kd = vec3(texture(diffuseColorSampler,  vertex_UV).rgb);
        Ks = vec3(mix(Kd ,Ks ,0.5));
        Ka = vec3(0.12, 0.26, 0);
        Ns = 100;
    }
    
    if (trans==0){
        discard;
    }
    if (lakeflag==0){
        discard;
    }
    
  


    vec3 Ia =  Ka * La;

    vec3 N = normalize(vertex_normal_cameraspaceN);
    vec3 L = -normalize( light_position_cameraspace - vertex_position_cameraspace);
    float cosTheta = clamp(dot(N,L),0.1,1);
    vec3 Id = Ld*Kd*cosTheta;


    vec3 R = reflect(-L,N);
    vec3 E = normalize( -vertex_position_cameraspace );
    float cosAlpha=clamp(dot(R,E), 0, 1);
    float specularfactor = pow(cosAlpha, Ns);
    vec3 Is = Ks * Ls * light_color * specularfactor;


    float dist = length(vertex_position_cameraspace- light_position_cameraspace);
    dist = dist;
    if (dist<1){
        dist=1;
    }
    

    if(textureflag==4){
        vec3 color1 = vec3(texture(diffuseColorSampler, vertex_UV + 0.5 * (1-pow(vertex_UV.x -0.5, 2)) * time).rgb);
        vec3 color0 = vec3(texture(specularColorSampler, vertex_UV - 0.55* (1-pow(vertex_UV.y -0.5, 2)) * time).rgb);
        Id = vec3(mix(color1,color0,0.5));
    }

    color1 = Ia + (Id + Is) ;
    
}